#cloud-config
hostname: "$hostname$"
write_files:
  - path: "/etc/hosts"
    permissions: "0644"
    owner: "root"
    content: |
      # IPv4 and IPv6 localhost aliases
      127.0.0.1       localhost $hostname$.$domain$
      ::1             localhost
  - path: "/home/root/registry_certs/gencertkey.sh"
    permissions: "0755"
    owner: "root"
    content: |
      #!/bin/bash
      if [ ! -f /home/root/registry_certs/docker-registry.crt ]; then
        cd /home/root/registry_certs/
        echo "Creating crt and key files into /home/root/registry_certs/"
        /usr/bin/openssl req \
        -newkey rsa:4096 -nodes -sha256 \
        -keyout docker-registry.key -x509 -days 1000 -out docker-registry.crt \
        -subj "/C=ES/ST=MADRID/L=MADRID/O=BBVA/OU=EuroCloud/CN=$hostname$.$domain$"
      else
        echo "Found file /home/root/registry_certs/docker-registry.crt. Skipping certificate creation ..."
      fi
  - path: "/home/root/redis/redis.conf"
    permissions: "0644"
    owner: "root"
    content: |
      protected-mode yes
      port 6379
      tcp-backlog 511
      timeout 0
      tcp-keepalive 300
      daemonize no
      supervised no
      pidfile /var/run/redis_6379.pid
      loglevel notice
      logfile ""
      databases 16
      save 900 1
      save 300 10
      save 60 10000
      stop-writes-on-bgsave-error yes
      rdbcompression yes
      rdbchecksum yes
      dbfilename dump.rdb
      dir ./
      slave-serve-stale-data yes
      slave-read-only yes
      repl-diskless-sync no
      repl-diskless-sync-delay 5
      repl-disable-tcp-nodelay no
      slave-priority 100
      appendonly no
      appendfilename "appendonly.aof"
      appendfsync everysec
      no-appendfsync-on-rewrite no
      auto-aof-rewrite-percentage 100
      auto-aof-rewrite-min-size 64mb
      aof-load-truncated yes
      lua-time-limit 5000
      slowlog-log-slower-than 10000
      slowlog-max-len 128
      latency-monitor-threshold 0
      notify-keyspace-events ""
      hash-max-ziplist-entries 512
      hash-max-ziplist-value 64
      list-max-ziplist-size -2
      list-compress-depth 0
      set-max-intset-entries 512
      zset-max-ziplist-entries 128
      zset-max-ziplist-value 64
      hll-sparse-max-bytes 3000
      activerehashing yes
      client-output-buffer-limit normal 0 0 0
      client-output-buffer-limit slave 256mb 64mb 60
      client-output-buffer-limit pubsub 32mb 8mb 60
      hz 10
      aof-rewrite-incremental-fsync yes
      requirepass $redis_password$
  - path: "/home/root/registry/registry-config.yml"
    permissions: "0644"
    owner: "root"
    content: |
      version: 0.1
      log:
        fields:
          service: registry
      storage:
        cache:
          blobdescriptor: redis
        swift:
          username: $os_username$
          password: $os_password$
          authurl: $os_authurl$
          tenantid: $os_tenant_id$
          insecureskipverify: true
          region: $os_region$
          container: $os_swift_container$
        redirect:
          disable: true
      http:
        addr: :5000
        host: https://$hostname$.$domain$:5000
        secret: $secret$
        tls:
          certificate: /certs/docker-registry.crt
          key: /certs/docker-registry.key
      redis:
        addr: $hostname$.$domain$:6379
        password: $redis_password$
        db: 1
        dialtimeout: 10ms
        readtimeout: 10ms
        writetimeout: 10ms
        pool:
          maxidle: 16
          maxactive: 64
          idletimeout: 300s
  - path: "/home/root/registry/registry-proxy-config.yml"
    permissions: "0644"
    owner: "root"
    content: |
      version: 0.1
      log:
        fields:
          service: registry
      storage:
        filesystem:
          rootdirectory: /var/lib/registry
          maxthreads: 100
        cache:
          blobdescriptor: redis
      http:
        addr: :5000
        host: https://$hostname$.$domain$
        secret: $secret$
        tls:
          certificate: /certs/docker-registry.crt
          key: /certs/docker-registry.key
      redis:
        addr: $hostname$.$domain$:6379
        password: $redis_password$
        db: 0
        dialtimeout: 10ms
        readtimeout: 10ms
        writetimeout: 10ms
        pool:
          maxidle: 16
          maxactive: 64
          idletimeout: 300s
      proxy:
        remoteurl: https://registry-1.docker.io
        username: $registry_username$
        password: $registry_password$
  - path: "/run/docker-redis.sh"
    permissions: "0755"
    owner: "root"
    content: |
      #!/bin/bash
      echo never > /sys/kernel/mm/transparent_hugepage/enabled
      /usr/bin/docker run -d -p 6379:6379 \
      -v /data/redis:/data \
      -v /home/root/redis/redis.conf:/usr/local/etc/redis/redis.conf \
      --restart=always --name redis -d redis:3.2.4 redis-server /usr/local/etc/redis/redis.conf \
      --appendonly yes
  - path: "/run/docker-registry.sh"
    permissions: "0755"
    owner: "root"
    content: |
      #!/bin/bash
      REGISTRY_HTTP_USERNAME=$registry_http_username$
      REGISTRY_HTTP_PASSWORD=$registry_http_password$
      REGISTRY_HTTP_AUTH=''
      if [[ ! -z "$REGISTRY_HTTP_USERNAME" &&  ! -z "$REGISTRY_HTTP_PASSWORD" ]];then
        if [ ! -f /home/root/registry/htpasswd ];then
         docker run --entrypoint htpasswd registry:2.5 -Bbn $REGISTRY_HTTP_USERNAME $REGISTRY_HTTP_PASSWORD > /home/root/registry/htpasswd
        fi
        REGISTRY_HTTP_AUTH="-v /home/root/registry/htpasswd:/auth/htpasswd \
        -e REGISTRY_AUTH=htpasswd \
        -e REGISTRY_AUTH_HTPASSWD_REALM=RegistryRealm \
        -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd"
      fi
      /usr/bin/docker run -p 5000:5000 \
      -v /home/root/registry/registry-config.yml:/etc/docker/registry/config.yml \
      -v /data/registry:/var/lib/registry \
      -v /home/root/registry_certs:/certs \
      $(echo $REGISTRY_HTTP_AUTH) \
      --restart=always --name registry -d registry:2.5
  - path: "/run/docker-registry-proxy.sh"
    permissions: "0755"
    owner: "root"
    content: |
      #!/bin/bash
      /usr/bin/docker run -p 443:5000 \
      -v /home/root/registry/registry-proxy-config.yml:/etc/docker/registry/config.yml \
      -v /data/registry-proxy:/var/lib/registry \
      -v /home/root/registry_certs:/certs \
      --restart=always --name registry-proxy -d registry:2.5
  - path: "/run/wcnotify.sh"
    permissions: "0755"
    owner: "root"
    content: |
      #!/bin/bash
      /usr/bin/$wc_notify$ --data-binary '{"status": "SUCCESS", "reason": "Registry is ready , :)", "data": "OK"}'

coreos:
  units:
    - name: gen-cert-key.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=Generate cert and key
        [Service]
        Type=oneshot
        ExecStart=/home/root/registry_certs/gencertkey.sh
    - name: format-ephemeral.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=Formats the ephemeral drive
        After=dev-vdb.device
        Requires=dev-vdb.device
        ConditionPathExists=!/data
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/wipefs -f /dev/vdb
        ExecStart=/usr/sbin/mkfs.ext4 -F /dev/vdb
    - name: data.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /data
        Requires=format-ephemeral.service
        After=format-ephemeral.service
        [Mount]
        What=/dev/vdb
        Where=/data
        Type=ext4
    - name: docker.service
      drop-ins:
        - name: 09-opts-docker.conf
          content: |
            [Service]
            Environment="DOCKER_OPT_MTU=--mtu=$mtu$"
            Environment="DOCKER_OPTS=--registry-mirror=https://$hostname$.$domain$"
        - name: 10-wait-docker.conf
          content: |
            [Unit]
            After=data.mount
            Requires=data.mount
    - name: docker-redis.service
      command: start
      content: |
        [Unit]
        Description=Docker redis
        After=docker.service
        Requires=docker.service
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        TimeoutStartSec=0
        ExecStart=/run/docker-redis.sh
        ExecStop=/usr/bin/docker rm -f redis
        [Install]
        WantedBy=multi-user.target
    - name: docker-registry-proxy.service
      command: start
      content: |
        [Unit]
        Description=Docker registry proxy
        After=docker.service docker-redis.service gen-cert-key.service
        Requires=docker.service docker-redis.service gen-cert-key.service
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        TimeoutStartSec=0
        ExecStartPre=/usr/bin/mkdir -p /etc/docker/certs.d/$hostname$.$domain$
        ExecStartPre=/usr/bin/cp /home/root/registry_certs/docker-registry.crt /etc/docker/certs.d/$hostname$.$domain$/ca.crt
        ExecStart=/run/docker-registry-proxy.sh
        ExecStop=/usr/bin/docker rm -f registry-proxy
        [Install]
        WantedBy=multi-user.target
    - name: docker-registry.service
      command: start
      content: |
        [Unit]
        Description=Docker registry
        After=docker.service docker-redis.service gen-cert-key.service
        Requires=docker.service docker-redis.service gen-cert-key.service
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        TimeoutStartSec=0
        ExecStartPre=/usr/bin/mkdir -p /etc/docker/certs.d/$hostname$.$domain$:5000
        ExecStartPre=/usr/bin/cp /home/root/registry_certs/docker-registry.crt /etc/docker/certs.d/$hostname$.$domain$:5000/ca.crt
        ExecStart=/run/docker-registry.sh
        ExecStop=/usr/bin/docker rm -f registry
        [Install]
        WantedBy=multi-user.target
    - name: cfn-signal.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=Heat wait condition notifier
        After=docker-registry.service
        Requires=docker-registry.service
        [Service]
        Type=oneshot
        ExecStart=/run/wcnotify.sh