heat_template_version: 2015-04-30

description: >
  This template will create a VM (docker host) and places a docker registry container
  inside.

parameters:

  hostname:
    type: string
    description: Server name, docke host or registry.

  domain:
    type: string
    description: Domain name. (i.e eurocloud.es)

  registry_username:
    type: string
    description: Username of your private account in dockerhub.
    default: ''

  registry_password:
    type: string
    description: Password of your private account in dockerhub.
    hidden: true
    default: ''

  registry_http_username:
    type: string
    description: Http username.
    default: ''

  registry_http_password:
    type: string
    description: Http password.
    hidden: true
    default: ''

  registry_ca:
    type: string
    description: >
      Certificate authority that signed
      the registry certificate
    hidden: true
    default: ''

  registry_key:
    type: string
    description: Client key
    hidden: true
    default: ''

  docker_mtu:
    type: number
    description: MTU.
    default: 1400

  server_key:
    type: string
    description: Name of the SSH keypair registered with Nova
    constraints:
    - custom_constraint: nova.keypair

  server_image:
    type: string
    description: Glance image used to boot the server
    constraints:
    - custom_constraint: glance.image

  server_flavor:
    type: string
    description: Server flavor
    constraints:
    - custom_constraint: nova.flavor

  fip_network:
    type: string
    constraints:
    - custom_constraint: neutron.network
    description: Pool of floating ip addresses

  volume_size:
    type: number
    description: The size of attached volume for docker registry.
    default: 20

  os_username:
    type: string
    description: Your username in EuroCloud.

  os_password:
    type: string
    description: Your password for your user in EuroCloud.
    hidden: true

  os_swift_container:
    type: string
    description: Name of swift container.
    default: docker-registry

  os_region:
    type: string
    description: Name of swift container.

  os_authurl:
    type: string
    description: Auth URL, endpoint of identity service.

resources:

  wait_handle:
    type: OS::Heat::WaitConditionHandle

  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      timeout: 10000

  secret:
    type: OS::Heat::RandomString
    properties:
      length: 8

  redis_password:
    type: OS::Heat::RandomString
    properties:
      length: 16

  server:
    type: OS::Nova::Server
    depends_on:
    - volume
    properties:
      image: { get_param: server_image }
      flavor: { get_param: server_flavor }
      key_name: {get_param: server_key }
      user_data_format: RAW
      user_data: { get_resource: cloud_config_init}

  cloud_config_init:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: { get_file: files/coreos/cloud-config.yaml }
          params:
            "$hostname$": { get_param: hostname }
            "$domain$": { get_param: domain }
            "$os_username$": { get_param: os_username }
            "$os_password$": { get_param: os_password }
            "$os_tenant_id$": { get_param: "OS::project_id" }
            "$os_region$": { get_param: os_region }
            "$os_authurl$": { get_param: os_authurl }
            "$os_swift_container$": { get_param: os_swift_container }
            "$redis_password$": { get_attr: [ redis_password, value ] }
            "$secret$": { get_attr: [ secret, value ] }
            "$registry_username$": { get_param: registry_username }
            "$registry_password$": { get_param: registry_password }
            "$registry_http_username$": { get_param: registry_username }
            "$registry_http_password$": { get_param: registry_password }
            "$registry_ca$": { get_param: registry_ca}
            "$registry_key$": { get_param: registry_key }
            "$mtu$": { get_param: docker_mtu }
            "$wc_notify$": { get_attr: [ wait_handle, curl_cli ] }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
       floating_network: { get_param: fip_network }

  floating_ip_association:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: floating_ip }
      server_id: { get_resource: server }

  volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }

  volume_attach:
    type: OS::Cinder::VolumeAttachment
    properties:
      instance_uuid: { get_resource: server }
      volume_id: { get_resource: volume }
      mountpoint: /dev/vdb

outputs:
  registry_ips:
    description: Registry addresses
    value:
     - { get_attr: [ server, addresses ] }
  secret:
    description: The secret for http server
    value: { get_attr: [ secret, value ]}
  redis:
    description: Redis password
    value:
     - { get_attr: [ redis_password, value ]}
