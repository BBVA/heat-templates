#cloud-config
hostname: "$hostname$"
write_files:
  - path: "/home/root/registry_certs/gencertkey.sh"
    permissions: "0755"
    owner: "root"
    content: |
      #!/bin/bash
      cd /home/root/registry_certs/
      /usr/bin/openssl req -new -newkey rsa:4096 -nodes -x509 -subj "/C=ES/ST=MADRID/L=MADRID/O=EuroCloud/CN=$hostname$.$domain$" -keyout docker-registry.key -out docker-registry.crt
      /usr/bin/cat docker-registry.crt
  - path: "/run/wcnotify.sh"
    permissions: "0755"
    owner: "root"
    content: |
      #!/bin/bash
      /usr/bin/$wc_notify$ --data-binary '{"status": "SUCCESS", "reason": "Registry is ready , :)", "data": "OK"}'
  - path: "/run/docker-registry.sh"
    permissions: "0755"
    owner: "root"
    content: |
      #!/bin/bash
      REG_USER="$registry_user$"
      REG_PASSWORD="$registry_password$"
      envs="\
      -e REGISTRY_PROXY_REMOTEURL=https://registry-1.docker.io \
      -e REGISTRY_HTTP_SECRET=$secret$ \
      -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/docker-registry.crt \
      -e REGISTRY_HTTP_TLS_KEY=/certs/docker-registry.key \
      -e REGISTRY_STORAGE_CACHE_BLOBDESCRIPTOR=inmemory"
      if [[ ! -z "$REG_USER" &&  ! -z "$REG_PASSWORD" ]];then
        envs="$envs \
        -e REGISTRY_PROXY_USERNAME=$REG_USER
        -e REGISTRY_PROXY_PASSWORD=$REG_PASSWORD"
      fi
      /usr/bin/docker run -d -p 443:5000 \
      -v /var/lib/docker/registry:/var/lib/registry \
      -v /home/root/registry_certs:/certs \
      $envs \
      --restart=always --name registry registry:2.5
  - path: "/etc/hosts"
    permissions: "0644"
    owner: "root"
    content: |
      127.0.0.1 localhost $hostname$
coreos:
  units:
    - name: gen-cert-key.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=Generate cert and key
        [Service]
        Type=oneshot
        ExecStart=/home/root/registry_certs/gencertkey.sh
    - name: format-ephemeral.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=Formats the ephemeral drive
        After=dev-vdb.device
        Requires=dev-vdb.device
        ConditionPathExists=!/var/lib/docker/registry
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/sbin/wipefs -f /dev/vdb
        ExecStart=/usr/sbin/mkfs.ext4 -F /dev/vdb
    - name: var-lib-docker.mount
      command: start
      content: |
        [Unit]
        Description=Mount ephemeral to /var/lib/docker
        Requires=format-ephemeral.service
        After=format-ephemeral.service
        [Mount]
        What=/dev/vdb
        Where=/var/lib/docker
        Type=ext4
    - name: docker-registry.service
      command: start
      content: |
        [Unit]
        Description=Docker registry for basic images for k8s cluster
        After=docker.service gen-cert-key.service
        Requires=docker.service gen-cert-key.service
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        TimeoutStartSec=0
        ExecStartPre=/usr/bin/mkdir -p /etc/docker/certs.d/$hostname$.$domain$
        ExecStartPre=/usr/bin/cp /home/root/registry_certs/docker-registry.crt /etc/docker/certs.d/$hostname$.$domain$/ca.crt
        ExecStartPre=/usr/bin/systemctl restart docker
        ExecStartPre=-/usr/bin/docker kill registry
        ExecStartPre=-/usr/bin/docker rm registry
        ExecStartPre=/usr/bin/docker pull registry:2.5
        ExecStart=/run/docker-registry.sh
        ExecStop=/usr/bin/docker rm -f registry
        [Install]
        WantedBy=multi-user.target
    - name: docker.service
      drop-ins:
        - name: 09-opts-docker.conf
          content: |
            [Service]
            Environment="DOCKER_OPT_MTU=--mtu=$mtu$"
            Environment="DOCKER_OPTS=--registry-mirror=https://$hostname$.$domain$"
        - name: 10-wait-docker.conf
          content: |
            [Unit]
            After=var-lib-docker.mount
            Requires=var-lib-docker.mount
    - name: cfn-signal.service
      runtime: true
      command: start
      content: |
        [Unit]
        Description=Heat wait condition notifier
        After=docker-registry.service
        Requires=docker-registry.service
        [Service]
        Type=oneshot
        ExecStart=/run/wcnotify.sh