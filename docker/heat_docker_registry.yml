heat_template_version: 2015-04-30

description: >
  This template will create a VM (docker host) and places a docker registry container
  inside.

parameters:

  hostname:
    type: string
    description: Name of the server, docke host or registry.

  docker_mtu:
    type: number
    description: MTU.
    default: 1400

  server_key:
    type: string
    description: Name of the SSH keypair registered with Nova
    constraints:
    - custom_constraint: nova.keypair

  server_image:
    type: string
    default: "CoreOS-1068.6.0"
    description: Glance image used to boot the server
    constraints:
    - allowed_values: ["CoreOS-1068.6.0"]
    - custom_constraint: glance.image

  server_flavor:
    type: string
    default: m1.medium
    description: Server flavor
    constraints:
    - custom_constraint: nova.flavor

  fip_network:
    type: string
    default: PUBLIC-ACCESS-POOL-2
    constraints:
    - allowed_values: ["PUBLIC-ACCESS-POOL-1", "PUBLIC-ACCESS-POOL-2"]
    - custom_constraint: neutron.network
    description: Pool of floating ip addresses

  volume_size:
    type: number
    description: The size of attached volume for docker registry.
    default: 20

resources:

  wait_handle:
    type: OS::Heat::WaitConditionHandle

  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      timeout: 10000

  server:
    type: OS::Nova::Server
    depends_on:
    - volume
    properties:
      image: { get_param: server_image }
      flavor: { get_param: server_flavor }
      key_name: {get_param: server_key }
      user_data_format: RAW
      user_data: { get_resource: cloud_config_init}

  cloud_config_init:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: { get_file: files/registry/coreos/cloud-config.yaml }
          params:
            "$hostname$": { get_param: hostname }
            "$mtu$": { get_param: docker_mtu }
            "$wc_notify$": { get_attr: ['wait_handle', 'curl_cli'] }

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
       floating_network: { get_param: fip_network }

  floating_ip_association:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: floating_ip }
      server_id: { get_resource: server }

  volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: volume_size }

  volume_attach:
    type: "OS::Cinder::VolumeAttachment"
    properties:
      instance_uuid: { get_resource: server }
      volume_id: { get_resource: volume }
      mountpoint: /dev/vdb

outputs:

  deployment_result:
    value:
      get_attr: [software_deployment, result]
  deployment_stdout:
    value:
      get_attr: [software_deployment, deploy_stdout]
  deployment_stderr:
    value:
      get_attr: [software_deployment, deploy_stderr]
  deployment_status_code:
    value:
      get_attr: [software_deployment, deploy_status_code]
  wc_data:
    description: Syncronization data
    value: { get_attr: ['wait_condition', 'data'] }
  registry ips:
    description: Container Information
    value:
     - { get_attr: [ server, addresses ] }
     - { get_attr: [ floating_ip, floating_ip_address]}