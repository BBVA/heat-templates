heat_template_version: 2014-10-16

description: >
  This template will create a VM (docker host) and places an OpenShift docker container
  inside.

parameters:

  image:
    type: string
    description: >
      Name or ID of the image registered with Glance
    constraints:
      - custom_constraint: glance.image

  keypair:
    type: string
    description: >
      Name of the SSH keypair registered with Nova
    constraints:
    - custom_constraint: nova.keypair

  flavor:
    type: string
    description: >
      The flavor to use for the vm instances
    default: m1.small
    constraints:
      - allowed_values: ["m1.small", "m1.medium"]
      - custom_constraint: nova.flavor

  network:
    type: string
    description: >
      The network that instance is attached to.
    constraints:
    - custom_constraint: neutron.network

  fip_network:
    type: string
    constraints:
      - custom_constraint: neutron.network
    description: pool of floating ip addresses

resources:

  wait_handle:
    type: OS::Heat::WaitConditionHandle

  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      timeout: 10000

  openshift_config:
    type: OS::Heat::CloudConfig
    properties:
      cloud_config:
        bootcmd:
         - curl -fsSL https://get.docker.com/ | sh
         - systemctl --no-block start docker
         - systemctl enable docker.service
        runcmd:
         - docker run -d --name "origin" --privileged --pid=host --net=host -v /:/rootfs:ro -v /var/run:/var/run:rw -v /sys:/sys -v /var/lib/docker:/var/lib/docker:rw -v /var/lib/origin/openshift.local.volumes:/var/lib/origin/openshift.local.volumes openshift/origin start

  wc_notifier_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: ungrouped
      config:
        str_replace:
          template: |
            #!/bin/sh
            $WC_NOTIFY$ --data-binary '{"status": "SUCCESS"}'
          params:
            $WC_NOTIFY$: { get_attr: ['wait_handle', 'curl_cli'] }

  init:
    type: OS::Heat::MultipartMime
    properties:
      parts:
      - config: { get_resource: openshift_config }
      - config: { get_resource: wc_notifier_config }

  server:
    type: OS::Nova::Server
    properties:
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: keypair }
      networks:
        - network: { get_param: network }
      user_data_format: RAW
      user_data:
        get_resource: init

  floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
       floating_network: { get_param: fip_network }

  floating_ip_association:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: floating_ip }
      server_id: { get_resource: server }

outputs:
  wc_data:
    value: { get_attr: [wait_condition, data] }
  openshift:
    description: OpenShift Web Console
    value:
      str_replace:
        template: |
          $fip$:8443
        params:
          $fip$: { get_attr: [ floating_ip, floating_ip_address ] }